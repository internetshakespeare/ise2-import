<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="ise2-import" default="all">
	<description>ISE2->ISE3 conversion scripts</description>

	<import file="lib/schematron/ant-macro.xml"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	<taskdef
		name="jing"
		classname="com.thaiopensource.relaxng.util.JingTask"
		classpath="lib/jing.jar"/>

<!--#########################################################################-->
<!--## Configuration                                                       ##-->

	<property name="myID" value="${user.name}"/>
	<property name="site" value="ise"/>
	<property name="metadata" value="ise2/metadata"/>
	<property name="taxonomies" value="${basedir}/ise3/taxonomies.xml"/>
	<property name="orgography" value="${basedir}/ise3/orgography.xml"/>
	<property name="personography" value="${basedir}/ise3/personography.xml"/>
	<property name="xwiki-exporter" value="http://isebeta.uvic.ca/xwiki/bin/view/IseCode/PublishedPagePipe?xpage=plain"/>

	<fileset id="src.iml.os" dir="ise2">
		<include name="documents/iml/doc_*.txt"/>
		<exclude name="documents/iml/doc_*M.txt"/>
		<exclude name="documents/iml/doc_*Me.txt"/>
	</fileset>

	<fileset id="src.iml.modern" dir="ise2">
		<include name="documents/iml/doc_*M.txt"/>
		<include name="documents/iml/doc_*Me.txt"/>
	</fileset>

	<patternset id="src.xwiki">
		<include name="ise2/documents/xwiki/*.xml"/>
	</patternset>

	<patternset id="src.apparatus">
		<include name="ise2/annotations/*_annotation.xml"/>
		<include name="ise2/collations/*_collation.xml"/>
	</patternset>

<!--#########################################################################-->
<!--## Conversion tasks                                                    ##-->

	<target name="compile">
		<mkdir dir="classes"/>
		<javac srcdir="java" destdir="classes" includeantruntime="false">
			<classpath>
				<pathelement location="lib/isetools.jar"/>
			</classpath>
		</javac>
	</target>

	<target name="iml-os" description="convert old-spelling IML texts" depends="compile">
		<prepareiml filesRef="src.iml.os" to="work/os"/>
		<imltotei workdir="work/os" modern="false"/>
	</target>

	<target name="iml-modern" description="convert modern IML texts" depends="compile">
		<prepareiml filesRef="src.iml.modern" to="work/modern"/>
		<imltotei workdir="work/modern" modern="true"/>
	</target>

	<target name="iml" description="convert all IML texts" depends="iml-os, iml-modern"/>

	<target name="xwiki-src" description="fetch XWiki texts from the isebeta XWiki server">
		<property name="src.urls" value="xwiki-urls.txt"/>
		<dependset>
			<sources>
				<file file="${metadata}/collections/${site}.xml"/>
				<fileset dir="${metadata}/editions" includes="edition_*.xml"/>
			</sources>
			<targetfilelist dir="work" files="${src.urls}"/>
		</dependset>
		<xsl style="xsl/xwiki-list-urls.xsl" destdir="work">
			<include name="${metadata}/collections/${site}.xml"/>
			<mergemapper to="xwiki-urls.txt"/>
			<param name="xwikiBaseUrl" expression="${xwiki-exporter}"/>
		</xsl>
 		<get usetimestamp="yes" tryGzipEncoding="yes" dest="ise2/documents/xwiki" ignoreerrors="yes">
			<resourcelist>
				<file file="work/${src.urls}"/>
			</resourcelist>
			<mapper type="regexp"
				from="&amp;page=texts.([^&amp;]+).*&amp;edition=([^&amp;]+)"
				to="\2_\1.xml"
			/>
		</get>
	</target>

	<target name="xwiki" description="convert XWiki texts">
		<dependset>
			<srcfilelist dir="xsl" files="xwiki-tei.xsl, global.xsl, util.xsl, metadata.xsl, ilink.xsl"/>
			<targetfileset dir="ise3" includes="texts/*/supp/*.xml"/>
		</dependset>
		<xsl style="xsl/xwiki-tei.xsl" destdir="ise3">
			<patternset refid="src.xwiki"/>
			<regexpmapper
				from="([^/_]+)_([^/]+\.xml)$$"
				to="texts/\1/supp/ise\2"
			/>
		</xsl>
	</target>

	<target name="apparatus" description="convert annotations and collations">
		<xsl style="xsl/apparatus.xsl" destdir="ise3">
			<patternset refid="src.apparatus"/>
			<regexpmapper
				from="([^/_]+)_(.*)_(annotation|collation).xml$$"
				to="texts/\1/app/ise\1_\2_\3s.xml"
			/>
		</xsl>
	</target>

	<target name="facsimiles" description="convert facsimiles">
		<dependset>
			<srcfilelist dir="xsl" files="facsimile.xsl, global.xsl, util.xsl, metadata.xsl, ilink.xsl"/>
			<targetfileset dir="ise3/facsimiles" includes="*.xml"/>
		</dependset>
		<xsl style="xsl/facsimile.xsl" destdir="ise3">
			<include name="${metadata}/copies/copy_*.xml"/>
			<regexpmapper from="^.*/(copy_[^/]+\.xml)$$" to="facsimiles/\1"/>
		</xsl>
	</target>

	<target name="editions" description="convert editions">
		<dependset>
			<srcfilelist dir="xsl" files="edition.xsl, global.xsl, util.xsl, metadata.xsl, ilink.xsl"/>
			<targetfileset dir="ise3/texts" includes="*/supp/*_edition.xml"/>
		</dependset>
		<xsl style="xsl/edition.xsl" destdir="ise3">
			<include name="${metadata}/editions/edition_*.xml"/>
			<regexpmapper
				from="^.*/edition_(.*)\.xml$$"
				to="texts/\1/supp/ise\1_edition.xml"
			/>
		</xsl>
	</target>

<!--#########################################################################-->
<!--## Validation tasks                                                    ##-->

	<target name="get-tei-xsl">
		<get
			src="https://github.com/TEIC/Stylesheets/releases/download/v7.43.0/tei-xsl-7.43.0.zip"
			dest="lib/tei-xsl-7.43.0.zip"
			verbose="yes"
			skipexisting="yes"
		/>
		<unzip src="lib/tei-xsl-7.43.0.zip" dest="lib/tei-xsl" overwrite="false"/>
	</target>

	<target name="compile-odd" depends="get-tei-xsl">
		<xslt
			style="lib/tei-xsl/xml/tei/stylesheet/odds/odd2odd.xsl"
			in="sch/ise.odd"
			out="sch/ise-expanded.odd">
			<factory name="net.sf.saxon.TransformerFactoryImpl"/>
		</xslt>
		<xslt
			style="lib/tei-xsl/xml/tei/stylesheet/profiles/default/relaxng/to.xsl"
			in="sch/ise-expanded.odd"
			out="sch/ise.rng">
			<factory name="net.sf.saxon.TransformerFactoryImpl"/>
		</xslt>
		<xslt
			style="lib/tei-xsl/xml/tei/stylesheet/profiles/default/schematron/to.xsl"
			in="sch/ise.odd"
			out="sch/ise.sch">
			<factory name="net.sf.saxon.TransformerFactoryImpl"/>
		</xslt>
	</target>

	<target name="validate" depends="compile-odd">
		<jing rngfile="sch/ise.rng">
			<fileset dir="${basedir}/ise3">
				<exclude name="${taxonomies}"/>
			</fileset>
		</jing>
		<schematron schema="sch/ise.sch">
			<fileset dir="${basedir}/ise3">
				<exclude name="${taxonomies}"/>
			</fileset>
		</schematron>
	</target>

<!--#########################################################################-->
<!--## Standard targets                                                    ##-->

	<target
		name="all"
		description="convert all available data"
		depends="iml, xwiki, apparatus, facsimiles, editions, validate"/>

	<target name="clean">
		<delete dir="ise3/facsimiles"/>
		<delete dir="ise3/texts"/>
		<delete dir="work"/>
		<delete dir="classes"/>
	</target>

<!--#########################################################################-->
<!--## Macros                                                              ##-->

	<!-- shortcut for saxon transform with common input parameters -->
	<macrodef name="xsl">
		<attribute name="style"/>
		<attribute name="destdir"/>
		<element name="inout" implicit="yes"/>
		<sequential>
			<xslt style="@{style}" destdir="@{destdir}">
				<factory name="net.sf.saxon.TransformerFactoryImpl"/>
				<inout/>
				<param name="runBy" expression="${myID}"/>
				<param name="site" expression="${site}"/>
				<param name="metadataPath" expression="${basedir}/${metadata}"/>
				<param name="personographyPath" expression="${personography}"/>
				<param name="orgographyPath" expression="${orgography}"/>
				<param name="taxonomiesPath" expression="${taxonomies}"/>
			</xslt>
		</sequential>
	</macrodef>

	<!-- IML preprocessing (before TEI conversion) -->
	<property name="rex.anyAttrs"
		value='((?:\s+[^&gt;\s]+\s*=\s*(?:"[^"]*"|&apos;[^&apos;]*&apos;))*)'/>
	<macrodef name="prepareiml">
		<attribute name="filesRef"/>
		<attribute name="to"/>
		<sequential>
			<local name="files"/>
			<pathconvert property="files" refid="@{filesRef}" pathsep=" "/>
			<!-- use isetools to validate and expand curly-escapes -->
			<java classname="ise2import.ValidateAndExpand" failonerror="yes" fork="yes">
				<arg line="-o @{to}/raw ${files}"/>
				<classpath>
					<pathelement path="classes"/>
					<pathelement location="lib/isetools.jar"/>
				</classpath>
			</java>
			<!-- escape unicode characters (osx doesn't handle them well) -->
			<xslt
				style="xsl/escape-unicode.xsl"
				basedir="@{to}/raw"
				includes="*.txt"
				destdir="@{to}/escaped"
				extension=".txt"
			>
				<factory name="net.sf.saxon.TransformerFactoryImpl"/>
			</xslt>
			<!-- preprocess some tagging known to trip up osx -->
			<copy todir="@{to}/fixup">
				<fileset dir="@{to}/escaped" includes="*.txt"/>
				<flattenmapper/>
				<filterchain>
					<tokenfilter>
						<!-- remove whitespace at beginning and end of tags -->
						<replaceregex pattern="&lt;\s*" replace="&lt;" flags="g"/>
						<replaceregex pattern="\s*&gt;" replace="&gt;" flags="g"/>
						<!-- change several tags to milestones -->
						<replaceregex
							pattern="&lt;(PAGE|COL|MODE)${rex.anyAttrs}&gt;"
							replace="&lt;\1\2/&gt;"
							flags="gi"/>
						<replaceregex
							pattern="&lt;/MODE&gt;"
							replace='&lt;MODE T="end"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;/(PAGE|COL)&gt;"
							replace=""
							flags="gi"/>
						<replaceregex
							pattern="&lt;(SUB|SUP)&gt;"
							replace='&lt;VERTAL SWITCH="ON" T="\1"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;/(SUB|SUP)&gt;"
							replace='&lt;VERTAL SWITCH="OFF" T="\1"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;(C|RA|J)&gt;"
							replace='&lt;HORZAL SWITCH="ON" T="\1"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;/(C|RA|J)&gt;"
							replace='&lt;HORZAL SWITCH="OFF" T="\1"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;(BLL|I|R)&gt;"
							replace='&lt;STYLE SWITCH="ON" T="\1"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;/(BLL|I|R)&gt;"
							replace='&lt;STYLE SWITCH="OFF" T="\1"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;LS&gt;"
							replace='&lt;LS SWITCH="ON"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;/LS&gt;"
							replace='&lt;LS SWITCH="OFF"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;SC&gt;"
							replace='&lt;SC SWITCH="ON"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern="&lt;/SC&gt;"
							replace='&lt;SC SWITCH="OFF"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern='&lt;FONT\s+SIZE\s*=\s*("\s*\d+\s*"|&apos;\s*\d+\s*&apos;)&gt;'
							replace='&lt;FONT SWITCH="ON" SIZE=\1/&gt;'
							flags="gi"/>
						<replaceregex
							pattern='&lt;/FONT&gt;'
							replace='&lt;FONT SWITCH="OFF"/&gt;'
							flags="gi"/>
						<replaceregex
							pattern='&lt;INDENT\s+L\s*=\s*("\s*\d+\s*"|&apos;\s*\d+\s*&apos;)&gt;'
							replace='&lt;INDENT SWITCH="ON" N=\1/&gt;'
							flags="gi"/>
						<replaceregex
							pattern='&lt;/INDENT&gt;'
							replace='&lt;INDENT SWITCH="OFF"/&gt;'
							flags="gi"/>
						<!-- change self-closing tags to explicitly-closed tags -->
						<replaceregex
							pattern="&lt;([A-Z0-9]+)(${rex.anyAttrs})\s*/&gt;"
							replace="&lt;\1\2&gt;&lt;/\1&gt;"
							flags="gi"/>
					</tokenfilter>
					<tokenfilter>
						<filetokenizer/>
						<!-- remove whitespace at end of file -->
						<replaceregex pattern="\s*$$" replace=""/>
						<!-- insert explicit editor line breaks -->
						<replaceregex
							pattern="\s*\n+"
							replace="&lt;lb ed='this'&gt;&lt;/lb&gt;"
							flags="g"/>
						<replaceregex pattern="^" replace="&lt;!DOCTYPE WORK&gt;"/>
					</tokenfilter>
				</filterchain>
			</copy>
			<!-- convert to XML using osx -->
 			<mkdir dir="@{to}/osx"/> <!-- redirector fails if dir doesn't exist already -->
 			<apply executable="osx" dest="@{to}/osx" timeout="2000" skipemptyfilesets="yes" failonerror="yes">
 				<arg value="-E100"/>
 				<arg value="-wno-valid"/>
				<srcFile/>
				<fileset dir="@{to}/fixup" includes="*.txt"/>
				<globmapper from="*.txt" to="*.xml"/>
				<redirector createemptyfiles="no">
					<outputmapper type="glob" from="*.txt" to="@{to}/osx/*.xml"/>
					<errormapper type="glob" from="*" to="@{to}/osx/*-errors"/>
				</redirector>
			</apply>
		</sequential>
	</macrodef>

	<macrodef name="imltotei">
		<attribute name="workdir"/>
		<attribute name="modern"/>
		<sequential>
			<dependset>
				<srcfilelist dir="xsl" files="iml-tei-step1.xsl, global.xsl, util.xsl, metadata.xsl"/>
				<targetfileset dir="@{workdir}/tei-step1"/>
			</dependset>
			<xsl style="xsl/iml-tei-step1.xsl" destdir="@{workdir}/tei-step1">
				<include name="@{workdir}/osx/*.xml"/>
				<regexpmapper from="doc_(.+)_(.+)\.xml" to="${site}\1_\2.xml"/>
				<param name="modern" type="BOOLEAN" expression="@{modern}"/>
			</xsl>
			<xsl style="xsl/iml-tei-step2.xsl" destdir="@{workdir}/tei-step2">
				<include name="@{workdir}/tei-step1/*.xml"/>
				<flattenmapper/>
			</xsl>
			<xsl style="xsl/iml-tei-step3.xsl" destdir="@{workdir}/tei-step3">
				<include name="@{workdir}/tei-step2/*.xml"/>
				<flattenmapper/>
				<param name="modern" type="BOOLEAN" expression="@{modern}"/>
			</xsl>
			<xsl style="xsl/iml-tei-step4.xsl" destdir="ise3">
				<include name="@{workdir}/tei-step3/*.xml"/>
				<regexpmapper from="${site}(.+)_(.+)\.xml" to="texts/\1/main/\0"/>
			</xsl>
		</sequential>
	</macrodef>
</project>
